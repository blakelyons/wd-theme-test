
@import 'settings';
@import 'foundation';

$button-palette: (
        "primary": #{var(--clr-primary)},
        "primary-dark": #{var(--clr-primary-dark)},
        "primary-light": #{var(--clr-primary-light)},

        "secondary":#{var(--clr-secondary)},
        "secondary-dark":#{var(--clr-secondary-dark)},
        "secondary-light":#{var(--clr-secondary-light)},

        "accent": #{var(--btn-accent-color)},

        "dark": #{var(--clr-site-dark)},
        "white": #{var(--clr-ntrl-min)},

);

$button-radius: var(--button-radius);

.button {

  @include button($style: none);
  position: relative;
  z-index:0;

  &::before {
    content:"";
    width: auto;
    height: auto;
    background-color: var(--btn-hover-color);
    display:block;
    inset: -2px;
    position: absolute;
    z-index:-1;
    border-radius: inherit;
    opacity: 0;
    transition: opacity 50ms linear;
  }

  &:hover::before {
    opacity: var(--btn-hover-opacity);
  }

  // Sizes
  @each $size, $value in map-remove($button-sizes, default) {
    &.#{$size} {
      font-size: $value;
    }
  }

  // Solid, hollow & clear styles
  @each $filling in (solid hollow clear) {
    $selector: if($button-fill == $filling, null, '.#{$filling}');


    &#{$selector} {

      @if $filling == solid {
        &,
        &.disabled, &[disabled],
        &.disabled:hover, &[disabled]:hover,
        &.disabled:focus, &[disabled]:focus {
          background-color: #{var(--btn-color)};
          color: #{var(--btn-text-color)};
        }

        &:hover, &:focus {
          //background-color: $background-hover;
          color: #{var(--btn-text-color)};
        }
      }
      @else if $filling == hollow {
        @include button-hollow;

        &,
        &.disabled, &[disabled],
        &.disabled:hover, &[disabled]:hover,
        &.disabled:focus, &[disabled]:focus {
          border: $button-hollow-border-width solid #{var(--btn-color)};
          color: #{var(--btn-color)};
        }
      }
      @else if $filling == clear {
        @include button-clear;
        &,
        &.disabled, &[disabled],
        &.disabled:hover, &[disabled]:hover,
        &.disabled:focus, &[disabled]:focus {

          color: #{var(--btn-color)};
        }
      }

    }
  }

  @each $name, $color in $button-palette {
    &.#{$name} {
      --btn-color: #{$color};
      @if $name == accent {
        --btn-text-color: var(--btn-accent-text-color);
      }
      @if $name == white {
        --btn-text-color: var(--clr-on-light);
      }
      @if (str-ends-with(quote($name), '-light')) {
        --btn-text-color: var(--clr-on-light);
      }
    }
  }
}

.button {
  &.pill {
    border-radius: 2em;
  }
  &.primary-gradient {
    background: linear-gradient(to right, var(--clr-primary), var(--clr-primary-dark)) border-box;
    border: solid 2px transparent;
    background-clip: border-box;
    background-color: var(--clr-primary);
  }

 // Add other custom buttons here if needed
}



@include foundation-close-button;